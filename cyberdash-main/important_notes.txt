import subprocess
import shlex
from flask import request, render_template

@app.route('/nmap-scan', methods=['POST'])
def nmap_scan():
    target = request.form['target']         # e.g., "192.168.1.1"
    flags = request.form['flags']           # e.g., "-sS -Pn -T4"

    try:
        # shlex.split safely splits flags into list: ['-sS', '-Pn', '-T4']
        command = ['nmap'] + shlex.split(flags) + [target]

        result = subprocess.check_output(command, stderr=subprocess.STDOUT, universal_newlines=True)

        return render_template('scan_result.html', result=result, command=' '.join(command))

    except subprocess.CalledProcessError as e:
        return f"<pre>Nmap Error:\n{e.output}</pre>"
    except Exception as e:
        return f"<pre>Unexpected Error:\n{str(e)}</pre>"

from flask import Blueprint, render_template, request, redirect, url_for, flash
from models import db
from models.port_model import PortResult
from models.dns_model import DnsResult
from models.nmap_model import NmapCommand, NmapResult
import socket
import subprocess

# Correct Blueprint definitions
port_bp = Blueprint('port_scan', __name__, template_folder='templates/port_scan')
dns_bp = Blueprint('rev_dns_lookup', __name__, template_folder='templates/rev_dns_lookup')
nmap_bp = Blueprint('nmap_scan', __name__, template_folder='templates/nmap_scan')


@dns_bp.route('/rev_dns_lookup', methods=['GET', 'POST'])
def rev_dns_lookup():
    result = None
    if request.method == 'POST':
        ip = request.form['ip']
        try:
            result = socket.gethostbyaddr(ip)[0]
        except Exception as e:
            result = f"Failed: {str(e)}"

        entry = DnsResult(ip=ip, result=result)
        db.session.add(entry)
        db.session.commit()

    return render_template('dns.html', result=result)


@port_bp.route('/port_scan', methods=['GET', 'POST'])
def port_scan():
    result = None
    if request.method == 'POST':
        target = request.form['target']
        port = int(request.form['port'])

        try:
            sock = socket.socket()
            sock.settimeout(0.1)
            sock.connect((target, port))
            result = f"Port {port} is OPEN"
        except:
            result = f"Port {port} is CLOSED"

        entry = PortResult(target=target, result=result)
        db.session.add(entry)
        db.session.commit()

    return render_template('port.html', result=result)

Great question ‚Äî and this shows you're beginning to think **not just about syntax**, but **why** we write things a certain way. Let me explain clearly:

---

## üîç What does `command = command_entry.command` mean?

This line is saying:

> "Take the value from the `command` field of the database row (which is `command_entry`), and store it in a Python variable called `command`."

It's like saying:

```python
x = person.name
```

or

```python
message = email.subject
```

You're just **copying the value** from an object‚Äôs attribute into a new variable.

---

## ‚úÖ When do we use this?

You use it when:

1. You **fetched a row from a database**, and
2. You want to **access a specific column value** (like `.command`, `.username`, `.target`, etc.),
3. And possibly **use it in a subprocess**, condition, or render it to a template.

---

## üß† Example in Nmap Route

Suppose this is the command you selected from the dropdown:

```python
command_entry = NmapCommand.query.get(command_id)
```

Now `command_entry` is a **row** from your database, like:

| id | name     | command |
| -- | -------- | ------- |
| 1  | SYN Scan | -sS     |

Now you want to run that command using subprocess. So you extract the actual `-sS` part:

```python
command = command_entry.command  # ‚Üê now command = "-sS"
```

Now you can use:

```python
subprocess.check_output(['nmap', *command.split(), target])
```

If you skipped this line, and tried to do:

```python
subprocess.check_output(['nmap', *command_entry.split(), target])  ‚ùå
```

It would crash ‚Äî because `command_entry` is an object, not a string.

---

## üîÅ How to Know When You Need It

Ask yourself:

* ‚ùì Did I query a database row into an object?
* ‚ùì Do I now need just *one field* from that object (like command, username, etc)?
* ‚úÖ If yes ‚Üí use `variable = object.field`

---

## ‚úÖ TL;DR:

| Situation                 | Use                                        |
| ------------------------- | ------------------------------------------ |
| You queried a row         | `row = Model.query.get(id)`                |
| You want a specific field | `field_value = row.column_name`            |
| You want to use it later  | Store in `command = command_entry.command` |

---

| Task               | Code                                         |
| ------------------ | -------------------------------------------- |
| Add to DB          | `db.session.add(obj)`                        |
| Commit changes     | `db.session.commit()`                        |
| Query all entries  | `Model.query.all()`                          |
| Query by field     | `Model.query.filter_by(field=value).first()` |
| Get by ID (or 404) | `Model.query.get_or_404(id)`                 |
| Delete entry       | `db.session.delete(obj)`                     |


| Tool               | Library / Function Used  |
| ------------------ | ------------------------ |
| Port scan          | `socket.connect()`       |
| Reverse DNS Lookup | `socket.gethostbyaddr()` |
| Ping               | `subprocess.ping`        |
| Nmap Scan          | `subprocess.nmap`        |
| WHOIS              | `whois.whois()`          |




### ‚úÖ 1. What is a **socket** and why is it used?

> **A socket** is a programming interface that lets your Python code **send or receive data over the internet or local network**.

Imagine a phone call:

* You dial a number (host + port)
* If they pick up = ‚ÄúPort is open‚Äù
* If no one picks up = ‚ÄúPort is closed‚Äù

In programming, sockets do that dialing.

---

### üîç Use Case: Port Scanning

You want to check:

> Is **port 22** open on **google.com**?

That means:

* Create a socket
* Try to **connect** to `google.com:22`
* If connection works ‚Üí the port is open
* If it fails ‚Üí the port is closed

### ‚úÖ Syntax:

```python
import socket

sock = socket.socket()
sock.settimeout(0.5)
try:
    sock.connect(("google.com", 22))
    print("Port is open")
except:
    print("Port is closed")
sock.close()
```

---

### ‚úÖ 2. Common Python Networking Modules & When to Use Them

| Tool Type           | Python Module                           | Purpose                                       | Example Use              |
| ------------------- | --------------------------------------- | --------------------------------------------- | ------------------------ |
| Basic Port Scanning | `socket`                                | Low-level access to IPs and ports             | Port scanner, DNS lookup |
| Reverse DNS Lookup  | `socket.gethostbyaddr()`                | Converts IP to hostname                       | Reverse DNS Tool         |
| Whois Lookup        | `whois` (3rd party)                     | Gets domain ownership info                    | whois.google.com         |
| Ping                | `subprocess`                            | Executes `ping` system command                | Host discovery tool      |
| Nmap                | `subprocess`                            | Executes `nmap` CLI tool                      | Network scanner          |
| Traceroute          | `subprocess`                            | Executes `tracert`/`traceroute` from terminal | Path tracing             |
| DNS Lookup          | `socket.gethostbyname()` or `dnspython` | Domain ‚Üí IP                                   | DNS resolution           |
| HTTP Tools          | `requests`, `http.client`               | Send HTTP GET/POST reqs                       | Website scanners         |

---

### ‚úÖ 3. Socket Functions You Should Know

| Function                       | Use Case                                  |
| ------------------------------ | ----------------------------------------- |
| `socket.socket()`              | Create a new socket                       |
| `socket.connect((host, port))` | Try to connect to a target + port         |
| `socket.gethostbyname(domain)` | Get IP address of a domain                |
| `socket.gethostbyaddr(ip)`     | Get hostname from IP (reverse DNS)        |
| `settimeout(seconds)`          | Avoid long wait if target doesn‚Äôt respond |

---

### ‚úÖ Example 1: DNS Lookup

```python
import socket
ip = socket.gethostbyname("google.com")
print(ip)  # Output: IP address like 142.250.77.238
```

---

### ‚úÖ Example 2: Reverse DNS Lookup

```python
import socket
hostname = socket.gethostbyaddr("8.8.8.8")[0]
print(hostname)  # Output: dns.google
```

---

### ‚úÖ Example 3: Port Scanner with Loop

```python
import socket

target = "127.0.0.1"

for port in range(20, 30):
    sock = socket.socket()
    sock.settimeout(0.3)
    try:
        sock.connect((target, port))
        print(f"Port {port} is open")
    except:
        print(f"Port {port} is closed")
    sock.close()
```

---

### ‚ö†Ô∏è Why This Is Important for Flask Apps

* These modules give you **raw power** to interact with networks.
* Flask just **wraps the user interaction (frontend)** and **routes**.
* Without this Python backend logic, your tools are just buttons.

---

## üîÅ Summary to Memorize

| Task                  | Module       | Function                      |
| --------------------- | ------------ | ----------------------------- |
| Get IP from domain    | `socket`     | `gethostbyname()`             |
| Get hostname from IP  | `socket`     | `gethostbyaddr()`             |
| Check if port is open | `socket`     | `connect((host, port))`       |
| Run ping              | `subprocess` | `check_output(['ping', ...])` |
| Run nmap              | `subprocess` | `check_output(['nmap', ...])` |
| Whois info            | `whois`      | `whois(domain)`               |

---





